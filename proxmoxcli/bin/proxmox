#!/usr/bin/env python3
import logging
import urllib3
logging.basicConfig()
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

VERSION=1

def future_args(*outargs, **outkwargs):
    def ofunc(func, *args, **kwargs):
        def nfunc(*args, **kwargs):
            nargs = []
            nkwargs = {}
            for v in outargs:
                nargs.append(v())
            for k, v in outkwargs.items():
                arg = v()
                nkwargs.update({k: arg})
            return func(*nargs, *args, **nkwargs, **kwargs)
        return nfunc
    return ofunc

def print_result(method):
    def ofunc(func, *args, **kwargs):
        def nfunc(*args, **kwargs):
            import importlib
            import sys
            result = func(*args, **kwargs)
            importlib.import_module(method).dump(result, sys.stdout, indent=2)
            print()
            return result
        return nfunc
    return ofunc

__db__ = None
def connect_db(path="~/.proxmox.db"):
    global __db__
    import sqlite3
    import os
    __db__ = __db__ or sqlite3.connect(os.path.expanduser(os.path.expandvars(path)))
    return __db__

def list_login(hostname):
    db = connect_db()
    cursor = db.cursor()

    cursor.execute("select hostname,username,expire from login");
    results = cursor.fetchall()

    cursor.close()
    return results

def add_login(hostname, username, ticket, token):
    db = connect_db()
    cursor = db.cursor()

    cursor.execute("insert into login(hostname, username, ticket, token) values(?, ?, ?, ?)", [hostname, username, ticket, token])
    print("insert login", cursor.fetchall())
    cursor.close()
    db.commit()

def remove_login(hostname, username):
    db = connect_db()
    cursor = db.cursor()

    cursor.execute("delete from login where hostname = ? and username = ?", [hostname, username])
    cursor.fetchall()
    cursor.close()
    db.commit()

def update_login(hostname, username, ticket, token):
    db = connect_db()
    cursor = db.cursor()

    cursor.execute("update login set expire = DATETIME(CURRENT_TIMESTAMP, '+2 hours'), ticket = ?, token = ? where hostname = ? and username = ?", [ticket, token, hostname, username])
    cursor.close()
    db.commit()

def check_login(hostname, username):
    import datetime
    db = connect_db()
    cursor = db.cursor()

    cursor.execute("select expire,ticket,token from login where hostname = ? and username = ?", [hostname, username])
    results = cursor.fetchall()

    if results:
        expire, ticket, token = results[0]
        expire = datetime.datetime.strptime(expire, "%Y-%m-%d %X")
        now = datetime.datetime.now()
        if expire < now:
            return ((hostname, username), ticket, token)
        else:
            remove_login(hostname, username)
            return False
    else:
        remove_login(hostname, username)
        return False

def init_db():
    db = connect_db()
    cursor = db.cursor()
    
    cursor.executescript("""
    CREATE table IF NOT EXISTS login(
        hostname varchar(64) not null, 
        username varchar(64), 
        token varchar(128) not null, 
        ticket varchar(128) not null, 
        expire timestamp default(DATETIME(CURRENT_TIMESTAMP, '+2 hours')),
        PRIMARY KEY(`hostname`,`username`)
    );
    """)
    
    db.commit()

    cursor.close()
    return db


def has_login(hostname):
    for host, username, timestamp in list_login(hostname):
        res = check_login(hostname, username)
        if not res:
            remove_login(hostname, login)
        else:
            return res

def delete(hostname, path, data=None, json=None, **kwargs):
    import requests
    if not hostname.startswith("https://"):
        nhostname = "https://" + hostname
    else:
        nhostname = hostname
    if nhostname.endswith("/"):
        url = nhostname[:-1] + path
    else:
        url = nhostname + path
    if "verify" not in kwargs:
        kwargs.update({"verify": False})
    return requests.delete(url, data=data, json=json, **kwargs)

def post(hostname, path, data=None, json=None, **kwargs):
    import requests
    if not hostname.startswith("https://"):
        nhostname = "https://" + hostname
    else:
        nhostname = hostname
    if nhostname.endswith("/"):
        url = nhostname[:-1] + path
    else:
        url = nhostname + path
    if "verify" not in kwargs:
        kwargs.update({"verify": False})
    return requests.post(url, data=data, json=json, **kwargs)


def get(hostname, path, data=None, **kwargs):
    import requests
    if not hostname.startswith("https://"):
        nhostname = "https://" + hostname
    else:
        nhostname = hostname
    if nhostname.endswith("/"):
        url = nhostname[:-1] + path
    else:
        url = nhostname + path
    if "verify" not in kwargs:
        kwargs.update({"verify": False})
    return requests.get(url, data=data, **kwargs)


def login(hostname, username, realm="pve", **kwargs):
    _has_login = check_login(hostname, username)
    if _has_login:
        password = _has_login[1]
    else:
        remove_login(hostname, username)
        import getpass
        password = getpass.getpass()
    response = post(hostname, "/api2/extjs/access/ticket",
                    data={"username": username, "password": password, "realm": realm})
    data = response.json()
    if response.status_code == 200 and data['success'] == 1:
        if _has_login:
            update_login(hostname, username, data['data']['ticket'], data['data']['CSRFPreventionToken'])
        else:
            add_login(hostname, username, data['data']['ticket'], data['data']['CSRFPreventionToken'])
        return response.json()
    else:
        raise Exception(data['message'])


def resources(hostname, restype=None,p=None):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/cluster/resources", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    result = [ item for item in data['data'] if ({("type", restype)}.issubset(item.items()) or restype is None) ]
    if response.status_code == 200:
        return result
    else:
        raise Exception(data + str(response.status_code) + response.request.url)


def nextid(hostname):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/cluster/nextid", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return int(data['data'])


def nodes(hostname):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/nodes", params=data, cookies=cookies, headers=headers)
    data = response.json()
    return data['data']

def networks(hostname, node, nettype=None):
    if not node:
        return {node['id']: networks(hostname, node['node'], nettype) for node in nodes(hostname)}
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if netttype is not None:
        data.update({"type": nettype})
    response = get(hostname, "/api2/json/nodes/{node}/network".format(node=node), params=data, cookies=cookies, headers=headers)
    data = response.json()
    return data['data']

def storage(hostname, node, contenttype=None):
    if not node:
        return {node['id']: storage(hostname, node['node'], contenttype) for node in nodes(hostname)}
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if contenttype is not None:
        data.update({"content": contenttype})
    response = get(hostname, "/api2/json/nodes/{node}/storage".format(node=node), params=data, cookies=cookies, headers=headers)
    data = response.json()
    return data['data']

def content(hostname, node, storage, contenttype=None):
    if not (node and storage):
        raise Exception
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if contenttype is not None:
        data.update({"content": contenttype})
    response = get(hostname, "/api2/json/nodes/{node}/storage/{storage}/content".format(node=node, storage=storage), params=data, cookies=cookies, headers=headers)
    data = response.json()
    return data['data']

def lxc(hostname, vmid=None, node=None):
    if not node:
        return {node['id']: lxc(hostname, node=node['node']) for node in nodes(hostname)}
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/nodes/{node}/lxc".format(node=node), params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data']

def lxc_status(hostname, node, vmid, op):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if op == "status":
        response = get(hostname, "/api2/json/nodes/{node}/lxc/{vmid}/status/{op}".format(node=node, vmid=vmid, op=op), params=data, cookies=cookies, headers=headers)
    else:
        response = post(hostname, "/api2/json/nodes/{node}/lxc/{vmid}/status/{op}".format(node=node, vmid=vmid, op=op), data=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data'] if data else None

def lxc_create(hostname, node, path, scale, wait=False, retry=3):
    import logging
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    results = []
    for seqid in range(1, 1+scale):
        status = 0
        current_tries = 0
        while status != 1 and current_tries < retry:
            vmid = nextid(hostname)
            if current_tries > 0:
                ordinal = lambda n: "%d%s" % (n,"tsnrhtdd"[(n/10%10!=1)*(n%10<4)*n%10::4])
                print("retrying for the {} time".format(ordinal(current_tries)))
            while not status:
                if path.endswith(".yml") or path.endswith("yaml"):
                    import yaml
                    data = yaml.load(open(path).read().format(vmid=vmid, seqid=seqid, lxc_next=len(lxc(hostname, node=node))+1))
                logging.debug("Sending request data {} to dest {}".format(data, hostname+"/api2/json/nodes/{node}/lxc".format(node=node)))
                response = post(hostname, "/api2/json/nodes/{node}/lxc".format(node=node), data=data, cookies=cookies, headers=headers)
                data = response.json()
                logging.debug("Get data: {}".format(data))
                if 'data' in data and data['data'] and data['data'].startswith("UPID:") or ('success' in data and data['success']):
                    status = 1
                elif data['success'] == 0 and data['message'].find("already exists"):
                    print("vmid conflict")
                    vmid += 1
                else:
                    status = -1
            current_tries += 1
        if status == 1:
            results.append(response.json()['data'])
            if wait:
                wait_task(hostname, response.json()['data'])
        else:
            results.append(response.json()['message'])
    return results

def lxc_delete(hostname, node, vmid, wait=False):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if get(hostname, "/api2/json/nodes/{node}/lxc/{vmid}".format(node=node, vmid=vmid), data=data, cookies=cookies, headers=headers).status_code != 200:
        raise Exception("No such lxc vm")
    response = delete(hostname, "/api2/json/nodes/{node}/lxc/{vmid}".format(node=node, vmid=vmid), data=data, cookies=cookies, headers=headers)
    data = response.json()
    if response.status_code >= 400:
        raise Exception("http delete: {}".format(response.status_code))
    if wait:
        wait_task(hostname, data['data'])
    return data['data']

def qemu(hostname, node=None, vmid=None):
    if not node:
        return {node['id']: lxc(hostname, node=node['node']) for node in nodes(hostname)}
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/nodes/{node}/qemu".format(node=node), params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data']


def tasks(hostname):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/cluster/tasks", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data']

def wait_task(hostname, taskid, interval=1, progress=1):
    finished = False
    task = None
    if progress:
        print("waiting for task '{}' finish...".format(taskid), end="", flush=True)
    while not finished:
        try:
            task = [task for task in tasks(hostname) if task['upid'] == taskid][0]
        except IndexError:
            print([task for task in tasks(hostname) if task['upid'] == taskid])

        if "endtime" in task:
            finished = True
        if not finished:
            import time
            time.sleep(interval)
    if progress:
        print(task['status'])


def pools(hostname):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/pools", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data']

def cluster(hostname):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/cluster", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data']

def cluster_config(hostname, conf="nodes"):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    response = get(hostname, "/api2/json/cluster/config/{}".format(conf), params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data'] if data else {"status_code": response.status_code}

def cluster_resources(hostname, res_type=None):
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}
    data = {}
    if type is not None:
        data.update({"type": res_type})
    response = get(hostname, "/api2/json/cluster/resources", params=data, cookies=cookies, headers=headers)
    data = response.json() if response.status_code == 200 else ""
    return data['data'] if data else {"status_code": response.status_code}

def testurl(hostname, method, path, **kwargs):
    methods = {"get": get, "post": post, "del": delete, "delete": delete}
    mlogin = has_login(hostname)
    mlogin = has_login(hostname)
    if not mlogin:
        raise Exception("not logined")
    ((_, username), ticket, token) = mlogin
    headers = {"CSRFPreventionToken": token}
    cookies = {"PVEAuthCookie": ticket}

    response = methods[method](hostname, path, headers=headers, cookies=cookies, **kwargs)
    return response.json()['data'] if response.status_code < 500 else "server error"


def parseargs():
    import argparse
    import functools
    import os

    parser = argparse.ArgumentParser()
    parser.set_defaults(func=parser.print_help)
    parser.add_argument("-H", "--host")
    parser.add_argument("-l", "--level", "--log", default="info", choices=["debug", "info", "warn", "error", "fatal"])

    subparsers = parser.add_subparsers()

    init_subparser = subparsers.add_parser("init")
    init_subparser.set_defaults(func=init_db)

    login_subparser = subparsers.add_parser("login")
    login_subparser.add_argument("username")
    login_subparser.add_argument("password", nargs="?")
    login_subparser.set_defaults(func=login)

    list_subparser = subparsers.add_parser("list")
    list_subparser.add_argument("restype", nargs="?", choices=["lxc", "storage", "pool", "qemu"], metavar="type")
    list_subparser.set_defaults(func=resources)

    task_subparser = subparsers.add_parser("tasks")
    task_subparser.set_defaults(func=print_result("json")(future_args(
        hostname=lambda:parser.parse_args().host,
        )(tasks)))

    node_subparser = subparsers.add_parser("nodes")
    node_subparser.set_defaults(func=node_subparser.print_help)
    node_subparsers = node_subparser.add_subparsers()
    node_ls_subparser = node_subparsers.add_parser("ls")
    node_list_subparser = node_subparsers.add_parser("list")
    node_ls_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host
        )(nodes)))
    node_list_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host
        )(nodes)))
    node_network_subparser = node_subparsers.add_parser("network")
    node_network_subparser.add_argument("--node", default=None)
    node_network_subparser.add_argument("--type", choices=[
        "bridge", "eth", "alias", "vlan", "OVSBridge", "OVSBond", "OVSPort", "OVSIntPort", "any_bridge"
        ], default=None)
    node_network_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:parser.parse_args().node,
        lambda:parser.parse_args().type
        )(networks)))
    node_storage_subparser = node_subparsers.add_parser("storage")
    node_storage_subparser.add_argument("--node", default=None)
    node_storage_subparser.add_argument("--content", default=None)
    node_storage_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:parser.parse_args().node,
        lambda:parser.parse_args().content
        )(storage)))
    node_content_subparser = node_subparsers.add_parser("content")
    node_content_subparser.add_argument("--node", default=None)
    node_content_subparser.add_argument("--storage", default=None)
    node_content_subparser.add_argument("--content", default=None)
    node_content_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:parser.parse_args().node,
        lambda:parser.parse_args().storage,
        lambda:parser.parse_args().content
        )(content)))
    
    pool_subparser = subparsers.add_parser("pools")
    pool_subparser.set_defaults(func=pool_subparser.print_help)
    pool_subparsers = pool_subparser.add_subparsers()
    pool_ls_subparser = pool_subparsers.add_parser("ls")
    pool_list_subparser = pool_subparsers.add_parser("list")
    pool_ls_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host
        )(pools)))
    pool_list_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host
        )(pools)))

    lxc_subparser = subparsers.add_parser("lxc")
    lxc_subparser.add_argument("--node", default=None)
    lxc_subparsers = lxc_subparser.add_subparsers()
    lxc_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        node=lambda:parser.parse_args().node,
        )(lxc)))
    lxc_status_subparser = lxc_subparsers.add_parser("status")
    lxc_status_subparser.add_argument("op", nargs="?", default="current", choices=["current", "resume", "suspend", "start", "stop", "shutdown"])
    lxc_status_subparser.add_argument("--vmid", default=None)
    lxc_status_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        node=lambda:parser.parse_args().node,
        vmid=lambda:parser.parse_args().vmid,
        op=lambda:parser.parse_args().op,
        )(lxc_status)))
    lxc_create_subparser = lxc_subparsers.add_parser("create-with")
    lxc_create_subparser.add_argument("template")
    lxc_create_subparser.add_argument("--wait", default=False, action="store_true")
    lxc_create_subparser.add_argument("--scale", type=int, default=1)
    lxc_create_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        node=lambda:parser.parse_args().node,
        path=lambda:parser.parse_args().template,
        scale=lambda:parser.parse_args().scale,
        wait=lambda:parser.parse_args().wait,
        )(lxc_create)))
    lxc_delete_subparser = lxc_subparsers.add_parser("delete")
    lxc_delete_subparser.add_argument("vmid", nargs="?", default=None)
    lxc_delete_subparser.add_argument("--wait", default=False, action="store_true")
    lxc_delete_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        node=lambda:parser.parse_args().node,
        vmid=lambda:parser.parse_args().vmid,
        wait=lambda:parser.parse_args().wait,
        )(lxc_delete)))
    
    qemu_subparser = subparsers.add_parser("vm")
    qemu_subparser.add_argument("--node", default=None)
    qemu_subparsers = qemu_subparser.add_subparsers()
    qemu_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        node=lambda:parser.parse_args().node,
        )(qemu)))
    qemu_list_subparser = qemu_subparsers.add_parser("list")

    test_subparser = subparsers.add_parser("test")
    test_subparser.add_argument("method")
    test_subparser.add_argument("path")
    test_subparser.add_argument("--param")
    test_subparser.add_argument("--test")
    test_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:parser.parse_args().method,
        lambda:parser.parse_args().path,
        )(testurl)))


    cluster_subparser = subparsers.add_parser("cluster")
    cluster_subparser.set_defaults(func=cluster_subparser.print_help)
    cluster_subparsers = cluster_subparser.add_subparsers()
    cluster_config_subparser = cluster_subparsers.add_parser("config")
    cluster_config_subparser.set_defaults(func=cluster_config_subparser.print_help)
    cluster_config_subparsers = cluster_config_subparser.add_subparsers()
    cluster_config_nodes_subparser = cluster_config_subparsers.add_parser("nodes")
    cluster_config_nodes_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:"nodes"
        )(cluster_config)))
    cluster_config_totem_subparser = cluster_config_subparsers.add_parser("totem")
    cluster_config_totem_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:"totem"
        )(cluster_config)))
    cluster_resources_subparser = cluster_subparsers.add_parser("resources")
    cluster_resources_subparser.add_argument("-t", "--type", choices=["vm", "storage", "node"])
    cluster_resources_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host,
        lambda:parser.parse_args().type
        )(cluster_resources)))


    cluster_nextid_subparser = cluster_subparsers.add_parser("nextid")
    cluster_nextid_subparser.set_defaults(func=print_result("json")(future_args(
        lambda:parser.parse_args().host
        )(nextid)))



    result = vars(parser.parse_args())
    for name,env_name in (("host", "PROXMOX_HOST"),):
        if (name not in result or not result[name]):
            if env_name in os.environ:
                result.update({name, os.environ[env_name]})
            else:
                logging.warn("{} need to be specified in either command line or environment variable '{}'".format(name, env_name))

    return result


def main(args):
    import sys
    import logging
    args = parseargs()
    logging.basicConfig(level=logging.getLevelName(args.level.upper()))
    logging.debug(vars(args))
    if args.func: args.func()
    sys.exit(0)


if __name__ == "__main__":
    main(parseargs())
